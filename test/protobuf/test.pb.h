// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace fixbug {
class getFriendListReq;
class getFriendListReqDefaultTypeInternal;
extern getFriendListReqDefaultTypeInternal _getFriendListReq_default_instance_;
class getFriendListRes;
class getFriendListResDefaultTypeInternal;
extern getFriendListResDefaultTypeInternal _getFriendListRes_default_instance_;
class loginReq;
class loginReqDefaultTypeInternal;
extern loginReqDefaultTypeInternal _loginReq_default_instance_;
class loginRes;
class loginResDefaultTypeInternal;
extern loginResDefaultTypeInternal _loginRes_default_instance_;
class resCode;
class resCodeDefaultTypeInternal;
extern resCodeDefaultTypeInternal _resCode_default_instance_;
class user;
class userDefaultTypeInternal;
extern userDefaultTypeInternal _user_default_instance_;
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> ::fixbug::getFriendListReq* Arena::CreateMaybeMessage<::fixbug::getFriendListReq>(Arena*);
template<> ::fixbug::getFriendListRes* Arena::CreateMaybeMessage<::fixbug::getFriendListRes>(Arena*);
template<> ::fixbug::loginReq* Arena::CreateMaybeMessage<::fixbug::loginReq>(Arena*);
template<> ::fixbug::loginRes* Arena::CreateMaybeMessage<::fixbug::loginRes>(Arena*);
template<> ::fixbug::resCode* Arena::CreateMaybeMessage<::fixbug::resCode>(Arena*);
template<> ::fixbug::user* Arena::CreateMaybeMessage<::fixbug::user>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fixbug {

enum user_sex : int {
  user_sex_MAN = 0,
  user_sex_WOMAN = 1,
  user_sex_user_sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  user_sex_user_sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool user_sex_IsValid(int value);
constexpr user_sex user_sex_sex_MIN = user_sex_MAN;
constexpr user_sex user_sex_sex_MAX = user_sex_WOMAN;
constexpr int user_sex_sex_ARRAYSIZE = user_sex_sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* user_sex_descriptor();
template<typename T>
inline const std::string& user_sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, user_sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function user_sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    user_sex_descriptor(), enum_t_value);
}
inline bool user_sex_Parse(
    const std::string& name, user_sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<user_sex>(
    user_sex_descriptor(), name, value);
}
// ===================================================================

class resCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.resCode) */ {
 public:
  inline resCode() : resCode(nullptr) {};
  virtual ~resCode();

  resCode(const resCode& from);
  resCode(resCode&& from) noexcept
    : resCode() {
    *this = ::std::move(from);
  }

  inline resCode& operator=(const resCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline resCode& operator=(resCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const resCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resCode* internal_default_instance() {
    return reinterpret_cast<const resCode*>(
               &_resCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(resCode& a, resCode& b) {
    a.Swap(&b);
  }
  inline void Swap(resCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline resCode* New() const final {
    return CreateMaybeMessage<resCode>(nullptr);
  }

  resCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<resCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const resCode& from);
  void MergeFrom(const resCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.resCode";
  }
  protected:
  explicit resCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg_ = 2;
  void clear_errmsg_();
  const std::string& errmsg_() const;
  void set_errmsg_(const std::string& value);
  void set_errmsg_(std::string&& value);
  void set_errmsg_(const char* value);
  void set_errmsg_(const void* value, size_t size);
  std::string* mutable_errmsg_();
  std::string* release_errmsg_();
  void set_allocated_errmsg_(std::string* errmsg_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg_(
      std::string* errmsg_);
  private:
  const std::string& _internal_errmsg_() const;
  void _internal_set_errmsg_(const std::string& value);
  std::string* _internal_mutable_errmsg_();
  public:

  // int32 errcode_ = 1;
  void clear_errcode_();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_() const;
  void set_errcode_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode_() const;
  void _internal_set_errcode_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.resCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg__;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class loginReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.loginReq) */ {
 public:
  inline loginReq() : loginReq(nullptr) {};
  virtual ~loginReq();

  loginReq(const loginReq& from);
  loginReq(loginReq&& from) noexcept
    : loginReq() {
    *this = ::std::move(from);
  }

  inline loginReq& operator=(const loginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginReq& operator=(loginReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginReq* internal_default_instance() {
    return reinterpret_cast<const loginReq*>(
               &_loginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(loginReq& a, loginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(loginReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loginReq* New() const final {
    return CreateMaybeMessage<loginReq>(nullptr);
  }

  loginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loginReq& from);
  void MergeFrom(const loginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.loginReq";
  }
  protected:
  explicit loginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // bytes name_ = 1;
  void clear_name_();
  const std::string& name_() const;
  void set_name_(const std::string& value);
  void set_name_(std::string&& value);
  void set_name_(const char* value);
  void set_name_(const void* value, size_t size);
  std::string* mutable_name_();
  std::string* release_name_();
  void set_allocated_name_(std::string* name_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_(
      std::string* name_);
  private:
  const std::string& _internal_name_() const;
  void _internal_set_name_(const std::string& value);
  std::string* _internal_mutable_name_();
  public:

  // bytes pwd_ = 2;
  void clear_pwd_();
  const std::string& pwd_() const;
  void set_pwd_(const std::string& value);
  void set_pwd_(std::string&& value);
  void set_pwd_(const char* value);
  void set_pwd_(const void* value, size_t size);
  std::string* mutable_pwd_();
  std::string* release_pwd_();
  void set_allocated_pwd_(std::string* pwd_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pwd_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd_(
      std::string* pwd_);
  private:
  const std::string& _internal_pwd_() const;
  void _internal_set_pwd_(const std::string& value);
  std::string* _internal_mutable_pwd_();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.loginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class loginRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.loginRes) */ {
 public:
  inline loginRes() : loginRes(nullptr) {};
  virtual ~loginRes();

  loginRes(const loginRes& from);
  loginRes(loginRes&& from) noexcept
    : loginRes() {
    *this = ::std::move(from);
  }

  inline loginRes& operator=(const loginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginRes& operator=(loginRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginRes* internal_default_instance() {
    return reinterpret_cast<const loginRes*>(
               &_loginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(loginRes& a, loginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(loginRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loginRes* New() const final {
    return CreateMaybeMessage<loginRes>(nullptr);
  }

  loginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loginRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loginRes& from);
  void MergeFrom(const loginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.loginRes";
  }
  protected:
  explicit loginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .fixbug.resCode res_ = 1;
  bool has_res_() const;
  private:
  bool _internal_has_res_() const;
  public:
  void clear_res_();
  const ::fixbug::resCode& res_() const;
  ::fixbug::resCode* release_res_();
  ::fixbug::resCode* mutable_res_();
  void set_allocated_res_(::fixbug::resCode* res_);
  private:
  const ::fixbug::resCode& _internal_res_() const;
  ::fixbug::resCode* _internal_mutable_res_();
  public:
  void unsafe_arena_set_allocated_res_(
      ::fixbug::resCode* res_);
  ::fixbug::resCode* unsafe_arena_release_res_();

  // bool success_ = 2;
  void clear_success_();
  bool success_() const;
  void set_success_(bool value);
  private:
  bool _internal_success_() const;
  void _internal_set_success_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.loginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fixbug::resCode* res__;
  bool success__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class getFriendListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.getFriendListReq) */ {
 public:
  inline getFriendListReq() : getFriendListReq(nullptr) {};
  virtual ~getFriendListReq();

  getFriendListReq(const getFriendListReq& from);
  getFriendListReq(getFriendListReq&& from) noexcept
    : getFriendListReq() {
    *this = ::std::move(from);
  }

  inline getFriendListReq& operator=(const getFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline getFriendListReq& operator=(getFriendListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getFriendListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getFriendListReq* internal_default_instance() {
    return reinterpret_cast<const getFriendListReq*>(
               &_getFriendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getFriendListReq& a, getFriendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(getFriendListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getFriendListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getFriendListReq* New() const final {
    return CreateMaybeMessage<getFriendListReq>(nullptr);
  }

  getFriendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getFriendListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getFriendListReq& from);
  void MergeFrom(const getFriendListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getFriendListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.getFriendListReq";
  }
  protected:
  explicit getFriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsridFieldNumber = 1,
  };
  // uint32 usrid_ = 1;
  void clear_usrid_();
  ::PROTOBUF_NAMESPACE_ID::uint32 usrid_() const;
  void set_usrid_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usrid_() const;
  void _internal_set_usrid_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.getFriendListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usrid__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class user PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.user) */ {
 public:
  inline user() : user(nullptr) {};
  virtual ~user();

  user(const user& from);
  user(user&& from) noexcept
    : user() {
    *this = ::std::move(from);
  }

  inline user& operator=(const user& from) {
    CopyFrom(from);
    return *this;
  }
  inline user& operator=(user&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user* internal_default_instance() {
    return reinterpret_cast<const user*>(
               &_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(user& a, user& b) {
    a.Swap(&b);
  }
  inline void Swap(user* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user* New() const final {
    return CreateMaybeMessage<user>(nullptr);
  }

  user* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user& from);
  void MergeFrom(const user& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.user";
  }
  protected:
  explicit user(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef user_sex sex;
  static constexpr sex MAN =
    user_sex_MAN;
  static constexpr sex WOMAN =
    user_sex_WOMAN;
  static inline bool sex_IsValid(int value) {
    return user_sex_IsValid(value);
  }
  static constexpr sex sex_MIN =
    user_sex_sex_MIN;
  static constexpr sex sex_MAX =
    user_sex_sex_MAX;
  static constexpr int sex_ARRAYSIZE =
    user_sex_sex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  sex_descriptor() {
    return user_sex_descriptor();
  }
  template<typename T>
  static inline const std::string& sex_Name(T enum_t_value) {
    static_assert(::std::is_same<T, sex>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function sex_Name.");
    return user_sex_Name(enum_t_value);
  }
  static inline bool sex_Parse(const std::string& name,
      sex* value) {
    return user_sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kSexFieldNumber = 3,
  };
  // bytes name_ = 1;
  void clear_name_();
  const std::string& name_() const;
  void set_name_(const std::string& value);
  void set_name_(std::string&& value);
  void set_name_(const char* value);
  void set_name_(const void* value, size_t size);
  std::string* mutable_name_();
  std::string* release_name_();
  void set_allocated_name_(std::string* name_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_(
      std::string* name_);
  private:
  const std::string& _internal_name_() const;
  void _internal_set_name_(const std::string& value);
  std::string* _internal_mutable_name_();
  public:

  // uint32 age_ = 2;
  void clear_age_();
  ::PROTOBUF_NAMESPACE_ID::uint32 age_() const;
  void set_age_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age_() const;
  void _internal_set_age_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .fixbug.user.sex sex_ = 3;
  void clear_sex_();
  ::fixbug::user_sex sex_() const;
  void set_sex_(::fixbug::user_sex value);
  private:
  ::fixbug::user_sex _internal_sex_() const;
  void _internal_set_sex_(::fixbug::user_sex value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.user)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name__;
  ::PROTOBUF_NAMESPACE_ID::uint32 age__;
  int sex__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class getFriendListRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.getFriendListRes) */ {
 public:
  inline getFriendListRes() : getFriendListRes(nullptr) {};
  virtual ~getFriendListRes();

  getFriendListRes(const getFriendListRes& from);
  getFriendListRes(getFriendListRes&& from) noexcept
    : getFriendListRes() {
    *this = ::std::move(from);
  }

  inline getFriendListRes& operator=(const getFriendListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline getFriendListRes& operator=(getFriendListRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getFriendListRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getFriendListRes* internal_default_instance() {
    return reinterpret_cast<const getFriendListRes*>(
               &_getFriendListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getFriendListRes& a, getFriendListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(getFriendListRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getFriendListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getFriendListRes* New() const final {
    return CreateMaybeMessage<getFriendListRes>(nullptr);
  }

  getFriendListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getFriendListRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getFriendListRes& from);
  void MergeFrom(const getFriendListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getFriendListRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.getFriendListRes";
  }
  protected:
  explicit getFriendListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 2,
    kResFieldNumber = 1,
  };
  // repeated .fixbug.user friend_list = 2;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::fixbug::user* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::user >*
      mutable_friend_list();
  private:
  const ::fixbug::user& _internal_friend_list(int index) const;
  ::fixbug::user* _internal_add_friend_list();
  public:
  const ::fixbug::user& friend_list(int index) const;
  ::fixbug::user* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::user >&
      friend_list() const;

  // .fixbug.resCode res = 1;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const ::fixbug::resCode& res() const;
  ::fixbug::resCode* release_res();
  ::fixbug::resCode* mutable_res();
  void set_allocated_res(::fixbug::resCode* res);
  private:
  const ::fixbug::resCode& _internal_res() const;
  ::fixbug::resCode* _internal_mutable_res();
  public:
  void unsafe_arena_set_allocated_res(
      ::fixbug::resCode* res);
  ::fixbug::resCode* unsafe_arena_release_res();

  // @@protoc_insertion_point(class_scope:fixbug.getFriendListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::user > friend_list_;
  ::fixbug::resCode* res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::loginReq* request,
                       ::fixbug::loginRes* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendLists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::getFriendListReq* request,
                       ::fixbug::getFriendListRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::loginReq* request,
                       ::fixbug::loginRes* response,
                       ::google::protobuf::Closure* done);
  void GetFriendLists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::getFriendListReq* request,
                       ::fixbug::getFriendListRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// resCode

// int32 errcode_ = 1;
inline void resCode::clear_errcode_() {
  errcode__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 resCode::_internal_errcode_() const {
  return errcode__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 resCode::errcode_() const {
  // @@protoc_insertion_point(field_get:fixbug.resCode.errcode_)
  return _internal_errcode_();
}
inline void resCode::_internal_set_errcode_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode__ = value;
}
inline void resCode::set_errcode_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode_(value);
  // @@protoc_insertion_point(field_set:fixbug.resCode.errcode_)
}

// bytes errmsg_ = 2;
inline void resCode::clear_errmsg_() {
  errmsg__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& resCode::errmsg_() const {
  // @@protoc_insertion_point(field_get:fixbug.resCode.errmsg_)
  return _internal_errmsg_();
}
inline void resCode::set_errmsg_(const std::string& value) {
  _internal_set_errmsg_(value);
  // @@protoc_insertion_point(field_set:fixbug.resCode.errmsg_)
}
inline std::string* resCode::mutable_errmsg_() {
  // @@protoc_insertion_point(field_mutable:fixbug.resCode.errmsg_)
  return _internal_mutable_errmsg_();
}
inline const std::string& resCode::_internal_errmsg_() const {
  return errmsg__.Get();
}
inline void resCode::_internal_set_errmsg_(const std::string& value) {
  
  errmsg__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void resCode::set_errmsg_(std::string&& value) {
  
  errmsg__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.resCode.errmsg_)
}
inline void resCode::set_errmsg_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.resCode.errmsg_)
}
inline void resCode::set_errmsg_(const void* value,
    size_t size) {
  
  errmsg__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.resCode.errmsg_)
}
inline std::string* resCode::_internal_mutable_errmsg_() {
  
  return errmsg__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* resCode::release_errmsg_() {
  // @@protoc_insertion_point(field_release:fixbug.resCode.errmsg_)
  return errmsg__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void resCode::set_allocated_errmsg_(std::string* errmsg_) {
  if (errmsg_ != nullptr) {
    
  } else {
    
  }
  errmsg__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.resCode.errmsg_)
}
inline std::string* resCode::unsafe_arena_release_errmsg_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbug.resCode.errmsg_)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void resCode::unsafe_arena_set_allocated_errmsg_(
    std::string* errmsg_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg_ != nullptr) {
    
  } else {
    
  }
  errmsg__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.resCode.errmsg_)
}

// -------------------------------------------------------------------

// loginReq

// bytes name_ = 1;
inline void loginReq::clear_name_() {
  name__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& loginReq::name_() const {
  // @@protoc_insertion_point(field_get:fixbug.loginReq.name_)
  return _internal_name_();
}
inline void loginReq::set_name_(const std::string& value) {
  _internal_set_name_(value);
  // @@protoc_insertion_point(field_set:fixbug.loginReq.name_)
}
inline std::string* loginReq::mutable_name_() {
  // @@protoc_insertion_point(field_mutable:fixbug.loginReq.name_)
  return _internal_mutable_name_();
}
inline const std::string& loginReq::_internal_name_() const {
  return name__.Get();
}
inline void loginReq::_internal_set_name_(const std::string& value) {
  
  name__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void loginReq::set_name_(std::string&& value) {
  
  name__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.loginReq.name_)
}
inline void loginReq::set_name_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.loginReq.name_)
}
inline void loginReq::set_name_(const void* value,
    size_t size) {
  
  name__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.loginReq.name_)
}
inline std::string* loginReq::_internal_mutable_name_() {
  
  return name__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* loginReq::release_name_() {
  // @@protoc_insertion_point(field_release:fixbug.loginReq.name_)
  return name__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loginReq::set_allocated_name_(std::string* name_) {
  if (name_ != nullptr) {
    
  } else {
    
  }
  name__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.loginReq.name_)
}
inline std::string* loginReq::unsafe_arena_release_name_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbug.loginReq.name_)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void loginReq::unsafe_arena_set_allocated_name_(
    std::string* name_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name_ != nullptr) {
    
  } else {
    
  }
  name__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.loginReq.name_)
}

// bytes pwd_ = 2;
inline void loginReq::clear_pwd_() {
  pwd__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& loginReq::pwd_() const {
  // @@protoc_insertion_point(field_get:fixbug.loginReq.pwd_)
  return _internal_pwd_();
}
inline void loginReq::set_pwd_(const std::string& value) {
  _internal_set_pwd_(value);
  // @@protoc_insertion_point(field_set:fixbug.loginReq.pwd_)
}
inline std::string* loginReq::mutable_pwd_() {
  // @@protoc_insertion_point(field_mutable:fixbug.loginReq.pwd_)
  return _internal_mutable_pwd_();
}
inline const std::string& loginReq::_internal_pwd_() const {
  return pwd__.Get();
}
inline void loginReq::_internal_set_pwd_(const std::string& value) {
  
  pwd__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void loginReq::set_pwd_(std::string&& value) {
  
  pwd__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.loginReq.pwd_)
}
inline void loginReq::set_pwd_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.loginReq.pwd_)
}
inline void loginReq::set_pwd_(const void* value,
    size_t size) {
  
  pwd__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.loginReq.pwd_)
}
inline std::string* loginReq::_internal_mutable_pwd_() {
  
  return pwd__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* loginReq::release_pwd_() {
  // @@protoc_insertion_point(field_release:fixbug.loginReq.pwd_)
  return pwd__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loginReq::set_allocated_pwd_(std::string* pwd_) {
  if (pwd_ != nullptr) {
    
  } else {
    
  }
  pwd__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.loginReq.pwd_)
}
inline std::string* loginReq::unsafe_arena_release_pwd_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbug.loginReq.pwd_)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pwd__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void loginReq::unsafe_arena_set_allocated_pwd_(
    std::string* pwd_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pwd_ != nullptr) {
    
  } else {
    
  }
  pwd__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pwd_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.loginReq.pwd_)
}

// -------------------------------------------------------------------

// loginRes

// .fixbug.resCode res_ = 1;
inline bool loginRes::_internal_has_res_() const {
  return this != internal_default_instance() && res__ != nullptr;
}
inline bool loginRes::has_res_() const {
  return _internal_has_res_();
}
inline void loginRes::clear_res_() {
  if (GetArena() == nullptr && res__ != nullptr) {
    delete res__;
  }
  res__ = nullptr;
}
inline const ::fixbug::resCode& loginRes::_internal_res_() const {
  const ::fixbug::resCode* p = res__;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::resCode*>(
      &::fixbug::_resCode_default_instance_);
}
inline const ::fixbug::resCode& loginRes::res_() const {
  // @@protoc_insertion_point(field_get:fixbug.loginRes.res_)
  return _internal_res_();
}
inline void loginRes::unsafe_arena_set_allocated_res_(
    ::fixbug::resCode* res_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(res__);
  }
  res__ = res_;
  if (res_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.loginRes.res_)
}
inline ::fixbug::resCode* loginRes::release_res_() {
  auto temp = unsafe_arena_release_res_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::resCode* loginRes::unsafe_arena_release_res_() {
  // @@protoc_insertion_point(field_release:fixbug.loginRes.res_)
  
  ::fixbug::resCode* temp = res__;
  res__ = nullptr;
  return temp;
}
inline ::fixbug::resCode* loginRes::_internal_mutable_res_() {
  
  if (res__ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::resCode>(GetArena());
    res__ = p;
  }
  return res__;
}
inline ::fixbug::resCode* loginRes::mutable_res_() {
  // @@protoc_insertion_point(field_mutable:fixbug.loginRes.res_)
  return _internal_mutable_res_();
}
inline void loginRes::set_allocated_res_(::fixbug::resCode* res_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete res__;
  }
  if (res_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(res_);
    if (message_arena != submessage_arena) {
      res_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res_, submessage_arena);
    }
    
  } else {
    
  }
  res__ = res_;
  // @@protoc_insertion_point(field_set_allocated:fixbug.loginRes.res_)
}

// bool success_ = 2;
inline void loginRes::clear_success_() {
  success__ = false;
}
inline bool loginRes::_internal_success_() const {
  return success__;
}
inline bool loginRes::success_() const {
  // @@protoc_insertion_point(field_get:fixbug.loginRes.success_)
  return _internal_success_();
}
inline void loginRes::_internal_set_success_(bool value) {
  
  success__ = value;
}
inline void loginRes::set_success_(bool value) {
  _internal_set_success_(value);
  // @@protoc_insertion_point(field_set:fixbug.loginRes.success_)
}

// -------------------------------------------------------------------

// getFriendListReq

// uint32 usrid_ = 1;
inline void getFriendListReq::clear_usrid_() {
  usrid__ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getFriendListReq::_internal_usrid_() const {
  return usrid__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getFriendListReq::usrid_() const {
  // @@protoc_insertion_point(field_get:fixbug.getFriendListReq.usrid_)
  return _internal_usrid_();
}
inline void getFriendListReq::_internal_set_usrid_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usrid__ = value;
}
inline void getFriendListReq::set_usrid_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usrid_(value);
  // @@protoc_insertion_point(field_set:fixbug.getFriendListReq.usrid_)
}

// -------------------------------------------------------------------

// user

// bytes name_ = 1;
inline void user::clear_name_() {
  name__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user::name_() const {
  // @@protoc_insertion_point(field_get:fixbug.user.name_)
  return _internal_name_();
}
inline void user::set_name_(const std::string& value) {
  _internal_set_name_(value);
  // @@protoc_insertion_point(field_set:fixbug.user.name_)
}
inline std::string* user::mutable_name_() {
  // @@protoc_insertion_point(field_mutable:fixbug.user.name_)
  return _internal_mutable_name_();
}
inline const std::string& user::_internal_name_() const {
  return name__.Get();
}
inline void user::_internal_set_name_(const std::string& value) {
  
  name__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user::set_name_(std::string&& value) {
  
  name__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.user.name_)
}
inline void user::set_name_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.user.name_)
}
inline void user::set_name_(const void* value,
    size_t size) {
  
  name__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.user.name_)
}
inline std::string* user::_internal_mutable_name_() {
  
  return name__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user::release_name_() {
  // @@protoc_insertion_point(field_release:fixbug.user.name_)
  return name__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user::set_allocated_name_(std::string* name_) {
  if (name_ != nullptr) {
    
  } else {
    
  }
  name__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.user.name_)
}
inline std::string* user::unsafe_arena_release_name_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbug.user.name_)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void user::unsafe_arena_set_allocated_name_(
    std::string* name_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name_ != nullptr) {
    
  } else {
    
  }
  name__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.user.name_)
}

// uint32 age_ = 2;
inline void user::clear_age_() {
  age__ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 user::_internal_age_() const {
  return age__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 user::age_() const {
  // @@protoc_insertion_point(field_get:fixbug.user.age_)
  return _internal_age_();
}
inline void user::_internal_set_age_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age__ = value;
}
inline void user::set_age_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age_(value);
  // @@protoc_insertion_point(field_set:fixbug.user.age_)
}

// .fixbug.user.sex sex_ = 3;
inline void user::clear_sex_() {
  sex__ = 0;
}
inline ::fixbug::user_sex user::_internal_sex_() const {
  return static_cast< ::fixbug::user_sex >(sex__);
}
inline ::fixbug::user_sex user::sex_() const {
  // @@protoc_insertion_point(field_get:fixbug.user.sex_)
  return _internal_sex_();
}
inline void user::_internal_set_sex_(::fixbug::user_sex value) {
  
  sex__ = value;
}
inline void user::set_sex_(::fixbug::user_sex value) {
  _internal_set_sex_(value);
  // @@protoc_insertion_point(field_set:fixbug.user.sex_)
}

// -------------------------------------------------------------------

// getFriendListRes

// .fixbug.resCode res = 1;
inline bool getFriendListRes::_internal_has_res() const {
  return this != internal_default_instance() && res_ != nullptr;
}
inline bool getFriendListRes::has_res() const {
  return _internal_has_res();
}
inline void getFriendListRes::clear_res() {
  if (GetArena() == nullptr && res_ != nullptr) {
    delete res_;
  }
  res_ = nullptr;
}
inline const ::fixbug::resCode& getFriendListRes::_internal_res() const {
  const ::fixbug::resCode* p = res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::resCode*>(
      &::fixbug::_resCode_default_instance_);
}
inline const ::fixbug::resCode& getFriendListRes::res() const {
  // @@protoc_insertion_point(field_get:fixbug.getFriendListRes.res)
  return _internal_res();
}
inline void getFriendListRes::unsafe_arena_set_allocated_res(
    ::fixbug::resCode* res) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(res_);
  }
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.getFriendListRes.res)
}
inline ::fixbug::resCode* getFriendListRes::release_res() {
  auto temp = unsafe_arena_release_res();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::resCode* getFriendListRes::unsafe_arena_release_res() {
  // @@protoc_insertion_point(field_release:fixbug.getFriendListRes.res)
  
  ::fixbug::resCode* temp = res_;
  res_ = nullptr;
  return temp;
}
inline ::fixbug::resCode* getFriendListRes::_internal_mutable_res() {
  
  if (res_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::resCode>(GetArena());
    res_ = p;
  }
  return res_;
}
inline ::fixbug::resCode* getFriendListRes::mutable_res() {
  // @@protoc_insertion_point(field_mutable:fixbug.getFriendListRes.res)
  return _internal_mutable_res();
}
inline void getFriendListRes::set_allocated_res(::fixbug::resCode* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete res_;
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(res);
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    
  } else {
    
  }
  res_ = res;
  // @@protoc_insertion_point(field_set_allocated:fixbug.getFriendListRes.res)
}

// repeated .fixbug.user friend_list = 2;
inline int getFriendListRes::_internal_friend_list_size() const {
  return friend_list_.size();
}
inline int getFriendListRes::friend_list_size() const {
  return _internal_friend_list_size();
}
inline void getFriendListRes::clear_friend_list() {
  friend_list_.Clear();
}
inline ::fixbug::user* getFriendListRes::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.getFriendListRes.friend_list)
  return friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::user >*
getFriendListRes::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.getFriendListRes.friend_list)
  return &friend_list_;
}
inline const ::fixbug::user& getFriendListRes::_internal_friend_list(int index) const {
  return friend_list_.Get(index);
}
inline const ::fixbug::user& getFriendListRes::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.getFriendListRes.friend_list)
  return _internal_friend_list(index);
}
inline ::fixbug::user* getFriendListRes::_internal_add_friend_list() {
  return friend_list_.Add();
}
inline ::fixbug::user* getFriendListRes::add_friend_list() {
  // @@protoc_insertion_point(field_add:fixbug.getFriendListRes.friend_list)
  return _internal_add_friend_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::user >&
getFriendListRes::friend_list() const {
  // @@protoc_insertion_point(field_list:fixbug.getFriendListRes.friend_list)
  return friend_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fixbug::user_sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fixbug::user_sex>() {
  return ::fixbug::user_sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
